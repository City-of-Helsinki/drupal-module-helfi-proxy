<?php

/**
 * @file
 * Contains helfi_proxy installation procedure.
 */

declare(strict_types=1);

/**
 * Implements hook_install().
 */
function helfi_proxy_install() {
  \Drupal::service('module_installer')->install(['redirect']);
  \Drupal::configFactory()
    ->getEditable('redirect.settings')
    // Make sure route normalizer is enabled.
    ->set('route_normalizer_enabled', TRUE)
    ->save();
}

/**
 * Enable and configure 'redirect' module.
 */
function helfi_proxy_update_9001() : void {
  helfi_proxy_install();
}

/**
 * Enable asset purge configuration.
 */
function helfi_proxy_update_9002() : void {
  if (!\Drupal::moduleHandler()->moduleExists('varnish_purger')) {
    return;
  }
  /** @var \Drupal\Core\Config\ConfigInstallerInterface $configInstaller */
  $configInstaller = \Drupal::service('config.installer');
  $configInstaller->installDefaultConfig('module', 'helfi_proxy');

  // Re-installing the default configuration does not install purge
  // configuration for some reason.
  $plugins = \Drupal::configFactory()->getEditable('purge.plugins');
  $purgers = $plugins->get('purgers');

  if (!array_filter($purgers, fn (array $item) => $item['instance_id'] === 'assets')) {
    $purgers[] = [
      'instance_id' => 'assets',
      'plugin_id' => 'varnish',
      'order_index' => 4,
    ];
    $plugins->set('purgers', $purgers)
      ->save();
  }
  $loggers = \Drupal::configFactory()->getEditable('purge.logger_channels');
  $channels = $loggers->get('channels');

  if (!array_filter($channels, fn (array $item) => $item['id'] === 'purger_varnish_assets')) {
    $channels[] = [
      'id' => 'purger_varnish_assets',
      'grants' => [0, 2, 3],
    ];
  }
  $loggers->set('channels', $channels)
    ->save();
}

/**
 * Remove unused 'robots_header_enabled' config.
 */
function helfi_proxy_update_9003() : void {
  \Drupal::configFactory()->getEditable('helfi_proxy.settings')
    ->clear('robots_header_enabled')
    ->save();
}
